{"name":"MRSubtleButton","tagline":"A subtle gradient button, derived from NSView.","body":"##MRSubtleButton\r\nA subtle gradient button, derived from NSView.  No images involved.\r\n\r\nExample buttons with custom colours:\r\n\r\n![Button preview](http://www.fidgetbox.co.uk/mrsubtlebutton2.png)\r\n\r\n##Usage\r\nMRSubtleButton can be integrated into an existing project using [CocoaPods](http://cocoapods.org). Simply add the necessary dependency to your `Podfile` as follows:\r\n\r\n```ruby\r\nplatform :osx, '10.7'\r\npod 'MRSubtleButton'\r\n...\r\n```\r\n\r\nRun `pod install` to install.\r\n\r\nNext, drag a custom view from the object library in Xcode into your UI, and change its class to MRSubtleButton.\r\n\r\nCreate an outlet for the button and implement the `<MRSubtleButtonDelegate>` protocol in your controller with the following method (don't forget to `#import <MRSubtleButton.h>` in your controller):\r\n\r\n```objc\r\n- (void)MRSubtleButtonEvent:(NSEvent *)event with:(id)sender;\r\n```\r\n\r\nFinally, set the button's delegate to your controller object: `[button setDelegate:self]` and give the button a title: `[button setTitle:@\"Hello World!\"]`.\r\n\r\nIf you have more than one button with the same delegate you can determine which button was pressed by inspecting its title:\r\n\r\n```objc\r\n- (void)MRSubtleButtonEvent:(NSEvent *)event with:(id)sender\r\n{\r\n  // assuming sender is of class MRSubtleButton\r\n  if ([[sender title] isEqualToString:@\"Hello World!\"])\r\n  {\r\n    // your button event implementation\r\n  }\r\n}\r\n```\r\n\r\n##Custom colours and fonts\r\nEach button's gradient colour and font attributes (both colour and size) are adjustable.  Setting the button's colour is as easy as specifying a start and end colour for the gradient (note that the gradient starts at the bottom of the button):\r\n\r\n```objc\r\nNSColor *start = [NSColor colorWithCalibratedRed:205.0f/255.0f green:183.0f/255.0f blue:158.0f/255.0f alpha:1.0f];\r\nNSColor *end = [NSColor colorWithCalibratedRed:255.0f/255.0f green:239.0f/255.0f blue:213.0f/255.0f alpha:1.0f];\r\n\r\n[[self button] setGradientWithStartColor:start endColor:end];\r\n```\r\n\r\nA subtle gradient works best, with an end colour that is just a few shades lighter than the start colour.  To reset a button to the default light grey gradient use: `[button resetGradient]`.\r\n \r\nAdjusting a button's font attributes is just as easy:\r\n\r\n\r\n```objc\r\nNSFont *buttonFont = [NSFont fontWithName:@\"Helvetica\" size:18.0f];\r\nNSColor *buttonFontColor = [NSColor colorWithCalibratedRed:139.0f/255.0f green:136.0f/255.0f blue:120.0f/255.0f alpha:1.0f]; \r\n    \r\n[[self button] setFontAttributesWithFont:buttonFont color:buttonFontColor];\r\n\r\n[[self button] setTitle:@\"Customised button\"];\r\n```\r\n\r\nAn example using the preceding code:\r\n\r\n![Customised button](http://fidgetbox.co.uk/example_button.png)\r\n\r\n##Caveats\r\nPlease note that the source code uses ARC (Automatic Reference Counting) and has only been tested against 10.7 and 10.8 deployment targets.\r\n\r\n##License\r\n`MRSubtleButton` is provided under the terms of the [MIT License](http://opensource.org/licenses/mit-license.php).\r\n\r\n##Comments or suggestions?\r\nEmail me at [marc.ransome@fidgetbox.co.uk](mailto://marc.ransome@fidgetbox.co.uk) with bugs, feature requests or general comments and follow [@marcransome](http://www.twitter.com/marcransome) for updates.\r\n","google":"UA-31478860-1","note":"Don't delete this file! It's used internally to help with page regeneration."}